//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:libs/WebRTCAvConf-sources.jar!com/piasy/avconf/api/AudioDeviceManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AudioDeviceManager")
#ifdef RESTRICT_AudioDeviceManager
#define INCLUDE_ALL_AudioDeviceManager 0
#else
#define INCLUDE_ALL_AudioDeviceManager 1
#endif
#undef RESTRICT_AudioDeviceManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (CFAudioDeviceManager_) && (INCLUDE_ALL_AudioDeviceManager || defined(INCLUDE_CFAudioDeviceManager))
#define CFAudioDeviceManager_

@protocol CFAudioDeviceManagerCallback;

@protocol CFAudioDeviceManager < JavaObject >

- (void)setSpeakerphoneOn:(jboolean)speakerOn;

- (void)start:(jboolean)modifyAudioRoute
     callback:(id<CFAudioDeviceManagerCallback>)callback;

- (void)changeAudioRoute:(jboolean)routeToVoiceCall;

- (void)stop;

- (NSString *)getVolumeInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(CFAudioDeviceManager)

J2OBJC_TYPE_LITERAL_HEADER(CFAudioDeviceManager)

#define ComPiasyAvconfApiAudioDeviceManager CFAudioDeviceManager

#endif

#if !defined (CFAudioDevice_) && (INCLUDE_ALL_AudioDeviceManager || defined(INCLUDE_CFAudioDevice))
#define CFAudioDevice_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, CFAudioDevice_Enum) {
  CFAudioDevice_Enum_SPEAKER_PHONE = 0,
  CFAudioDevice_Enum_WIRED_HEADSET = 1,
  CFAudioDevice_Enum_EARPIECE = 2,
  CFAudioDevice_Enum_BLUETOOTH = 3,
  CFAudioDevice_Enum_NONE = 4,
};

@interface CFAudioDevice : JavaLangEnum

#pragma mark Public

+ (CFAudioDevice *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(CFAudioDevice)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT CFAudioDevice *CFAudioDevice_values_[];

inline CFAudioDevice *CFAudioDevice_get_SPEAKER_PHONE(void);
J2OBJC_ENUM_CONSTANT(CFAudioDevice, SPEAKER_PHONE)

inline CFAudioDevice *CFAudioDevice_get_WIRED_HEADSET(void);
J2OBJC_ENUM_CONSTANT(CFAudioDevice, WIRED_HEADSET)

inline CFAudioDevice *CFAudioDevice_get_EARPIECE(void);
J2OBJC_ENUM_CONSTANT(CFAudioDevice, EARPIECE)

inline CFAudioDevice *CFAudioDevice_get_BLUETOOTH(void);
J2OBJC_ENUM_CONSTANT(CFAudioDevice, BLUETOOTH)

inline CFAudioDevice *CFAudioDevice_get_NONE(void);
J2OBJC_ENUM_CONSTANT(CFAudioDevice, NONE)

FOUNDATION_EXPORT IOSObjectArray *CFAudioDevice_values(void);

FOUNDATION_EXPORT CFAudioDevice *CFAudioDevice_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT CFAudioDevice *CFAudioDevice_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(CFAudioDevice)

#endif

#if !defined (CFAudioDeviceManagerCallback_) && (INCLUDE_ALL_AudioDeviceManager || defined(INCLUDE_CFAudioDeviceManagerCallback))
#define CFAudioDeviceManagerCallback_

@class CFAudioDevice;

@protocol CFAudioDeviceManagerCallback < JavaObject >

- (void)onAudioDeviceChanged:(CFAudioDevice *)device;

@end

J2OBJC_EMPTY_STATIC_INIT(CFAudioDeviceManagerCallback)

J2OBJC_TYPE_LITERAL_HEADER(CFAudioDeviceManagerCallback)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AudioDeviceManager")
