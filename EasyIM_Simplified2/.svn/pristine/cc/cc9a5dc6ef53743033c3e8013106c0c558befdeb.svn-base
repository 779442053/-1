//
//  AppDelegate.m
//  EasyIM
//
//  Created by momo on 2019/1/3.
//  Copyright © 2019年 Looker. All rights reserved.
//

#import "AppDelegate.h"
#import "UINavigationBarSet.h"
#import "LoginVC.h"
#import "YKUserInfoManager.h"
#import <IQKeyboardManager.h>

#import "MMEasyIMHelper.h"
#import "KinTabBarController.h"

//Bugly Bug监控
#import "Bugly/Bugly.h"


static id _shareInstance = nil;

@interface AppDelegate ()<BuglyDelegate>

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    if (@available(iOS 11.0, *)) {
        [[UIScrollView appearance] setContentInsetAdjustmentBehavior:UIScrollViewContentInsetAdjustmentNever];
    }
    
    [self initViewController];
    
    // [S] Bugly配置
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        [self initBugly];
    });
    // [E]
    
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}


//MARK: - Custom Action
- (void)initViewController {
    
    //1. 增加网络监听
    [[MMManagerGlobeUntil sharedManager] managerReachability];
    [MMEasyIMHelper shareHelper];
    
    //2.设置导航栏
    [UINavigationBarSet setUP];
    
    //3.首先进入登录界面
    LoginVC *vc = [LoginVC new];
    self.window.rootViewController = vc;
    
    //4.设置键盘
    IQKeyboardManager *keyBoardManager = [IQKeyboardManager sharedManager];
    keyBoardManager.enable = YES;
    keyBoardManager.shouldResignOnTouchOutside = YES;
    
}

- (void)chooseHomePageVC {
    [_tabBarController selectHomePage];
}

- (void)enterMainUI {
    UINavigationController *navigationController = (UINavigationController *)[AppDelegate appRootViewController];
    [navigationController popToRootViewControllerAnimated:YES];
    [self chooseHomePageVC];
}

/**
 获取当前展示页面
 
 @return 当前展示页面
 */
+(UIViewController *)appRootViewController {
    UIViewController *appRootVC = [UIApplication sharedApplication].keyWindow.rootViewController;
    while (appRootVC.presentedViewController) {
        appRootVC = appRootVC.presentedViewController;
    }
    return appRootVC;
}

/** 单例 */
+(AppDelegate *__weak)appDelegate {
    if(_shareInstance != nil){
        return _shareInstance;
    }
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if(_shareInstance == nil){
            _shareInstance = [[self alloc] init];
        }
    });
    
    return _shareInstance;
}

-(id)copyWithZone:(NSZone *)zone{
    return _shareInstance;
}

+(id)allocWithZone:(struct _NSZone *)zone{
    
    if(_shareInstance != nil){
        return _shareInstance;
    }
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if(_shareInstance == nil){
            _shareInstance = [super allocWithZone:zone];
        }
    });
    
    return _shareInstance;
}


/** Bugly */
-(void)initBugly{
    
    @autoreleasepool {
        //开启Bugly配置
        BuglyConfig *config = [[BuglyConfig alloc] init];
        
        config.delegate = (id<BuglyDelegate>)self;
        //SDK Debug信息
#if DEBUG
        config.debugMode = YES;
        config.consolelogEnable = YES;
#else
        config.debugMode = NO;
        config.consolelogEnable = NO;
#endif
        
        //卡顿监控开关，默认关闭
        config.blockMonitorEnable = YES;
        
        //卡顿监控判断间隔，单位为秒
        config.blockMonitorTimeout = 1.0;
        
        //非正常退出事件记录开关，默认关闭
        config.unexpectedTerminatingDetectionEnable = YES;
        
        //设置自定义日志上报的级别，默认不上报自定义日志
        config.reportLogLevel = BuglyLogLevelDebug;
        [Bugly startWithAppId:K_APP_BUGLY_APP_ID config:config];
    }
}


////////////////////////////////////////////////////////////////////////////////
//MARK: - BuglyDelegate
////////////////////////////////////////////////////////////////////////////////
- (NSString * BLY_NULLABLE)attachmentForException:(NSException * BLY_NULLABLE)exception{
    NSArray *arr = [exception callStackSymbols];
    NSString *reason = [exception reason];
    NSString *name = [exception name];
    NSLog(@"++++++ callStackSymbols ++++++\n%@\n++++++ reason ++++++\n%@\n++++++ name ++++++\n%@",arr, reason, name);
    
    NSString *strLog = [NSString stringWithFormat:@"callStackSymbols：%@\n reason：%@\n name：%@",exception.callStackSymbols,exception.reason,exception.name];
    return strLog;
}


//MARK: - lazy load
-(UIWindow *)window{
    if (!_window) {
        _window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
        _window.backgroundColor = [UIColor whiteColor];
        
        //tint color 为 高亮颜色
        //tint color默认是蓝色，但是通过改变它的颜色你可以立即让app获得自己独特风格
        _window.tintColor = G_COLOR_NAVIGATION_007bf3;
        
        [_window makeKeyAndVisible];
        [_window makeKeyWindow];
    }
    return _window;
}

@end
