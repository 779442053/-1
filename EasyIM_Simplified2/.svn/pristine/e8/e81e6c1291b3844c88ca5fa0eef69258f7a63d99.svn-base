//
//  MMRequestManager.m
//  EasyIM
//
//  Created by momo on 2019/4/25.
//  Copyright © 2019年 Looker. All rights reserved.
//

#import "MMRequestManager.h"
#import "MMSystemHelp.h"

@interface MMRequestManager ()

@end

@implementation MMRequestManager

+ (void)createSocketConfig
{
    
    //自定义配置连接环境
    MMConnectConfig *connectConfig = [[MMConnectConfig alloc] init];
    connectConfig.host = [YKUserInfoManager userInfo].host;
    connectConfig.port = [YKUserInfoManager userInfo].port;
    
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] createSocketWithConfig:connectConfig];
    
}

/**
 * 1v1 单聊邀请
 */
+ (void)sendVedioRequestWithToId:(NSString *)toId
                        callType:(MMCallType)callType
                        callBack:(void(^)(MMCallSessionModel *session,NSError *error))callBack
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dic = @{
                          @"type":@"req",
                          @"xns":@"xns_user",
                          @"cmd":@"callUser",
                          @"sessionID":[YKUserInfoManager userInfo].sessionID,
                          @"toId":toId,
                          @"callType":callType == MMCallTypeVoice? @"0":@"1",
                          @"timeStamp":[MMDateHelper getNowTime]
                          };
    
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dic.innerXML];
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_vedio requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        NSLog(@"视频请求数据：%@",data);
        if ([data isKindOfClass:[NSDictionary class]]) {
            MMCallSessionModel *model = [MMCallSessionModel yy_modelWithDictionary:data];
            callBack(model,error);
        }
    }];
    
}

/**
 *  1vM群音视频呼叫
 */
+(void)sendVideoOrAudioWithGroupId:(NSString *)strGroupid
                       andCallType:(MMCallType)callType
                          callBack:(void(^)(MMCallSessionModel *session,NSError *error))callBack{
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dicParams = @{
                                @"type":@"req",
                                @"xns":@"xns_group",
                                @"timeStamp":[MMDateHelper getNowTime],
                                @"cmd":@"CallGroup",
                                @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                                @"fromId":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].userId:@"",
                                @"startId":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].userId:@"",
                                @"groupId":strGroupid,
                                //callType:语音呼叫 3 视频呼叫 4
                                @"callType":callType == MMCallTypeVoice? @"3":@"4",
                                };
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dicParams.innerXML];
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_vedio requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        NSLog(@"1vM群音视频请求数据：%@",data);
        if ([data isKindOfClass:[NSDictionary class]]) {
            NSDictionary *dicTemp = data;
            
            MMCallSessionModel *model = [MMCallSessionModel yy_modelWithDictionary:dicTemp];
            
            if ([dicTemp.allKeys containsObject:@"frmUid"]) {
                model.fromId = dicTemp[@"frmUid"];
                model.startId = dicTemp[@"frmUid"];
            }
            
            if ([dicTemp.allKeys containsObject:@"groupId"]) {
                model.toId = dicTemp[@"groupId"];
            }
            callBack(model,error);
        }
    }];
}

+ (void)hangUpCallWithToId:(NSString *)toId
                  webrtcId:(NSString *)webrtcId
                  callType:(NSInteger)callType
                  callBack:(void(^)(MMCallSessionModel *session,NSError *error))callBack
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dict = @{
                           @"type":@"req",
                           @"xns":@"xns_user",
                           @"cmd":@"HangUpCall",
                           @"sessionID":[YKUserInfoManager userInfo].sessionID,
                           @"webrtcId":webrtcId,
                           @"toId":toId,
                           @"media":@"",
                           @"callType":@(callType).description,
                           @"timeStamp":[MMDateHelper getNowTime]
                           };
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];

    
    //3.创建请求的Manage
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_hangUp requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        //3.1挂断Model处理
        if ([data isKindOfClass:[NSDictionary class]]) {
            MMCallSessionModel *model = [MMCallSessionModel yy_modelWithDictionary:data];
            callBack(model,error);
        }

    }];
    
}

+ (void)rejectCallWithToId:(NSString *)toId
                  webrtcId:(NSString *)webrtcId
                  callType:(NSInteger)callType
                  callBack:(void(^)(MMCallSessionModel *session,NSError *error))callBack
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dict = @{
                           @"type":@"req",
                           @"xns":@"xns_user",
                           @"cmd":@"RejectCall",
                           @"sessionID":[YKUserInfoManager userInfo].sessionID,
                           @"webrtcId":webrtcId,
                           @"toId":toId,
                           @"media":@"",
                           @"callType":@(callType).description,
                           @"timeStamp":[MMDateHelper getNowTime]
                           };
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_rejectCall requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        //3.1拒绝Model处理
        if ([data isKindOfClass:[NSDictionary class]]) {
            MMCallSessionModel *model = [MMCallSessionModel yy_modelWithDictionary:data];
            callBack(model,error);
        }
    }];

}


/**
 IM 登录接口

 @param param 参数
 @param successBack 成功后的回调
 */
+ (void)imLoginWithParameters:(NSDictionary *_Nonnull)param
                      callBack:(void(^_Nullable)(id _Nonnull responseData))successBack
{
    
    NSString *strURL = [NSString stringWithFormat:@"%@api_im/user/login2",K_APP_HOST_ADMIN3];
    
    [YHUtils POSTWithURLString:strURL
                    parameters:param
                       success:^(id  _Nullable responseObject) {
                           NSLog(@"IM登录返回数据：%@",responseObject);
                           
                           dispatch_async(dispatch_get_main_queue(), ^{
                               [MMProgressHUD hideHUD];
                           });
                           
                           NSDictionary *dicData;
                           if ([responseObject isKindOfClass:[NSDictionary class]]) {
                               dicData = (NSDictionary *)responseObject;
                           }
                           else if([responseObject isKindOfClass:[NSData class]]){
                               dicData = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
                           }
                           
                           //登录成功
                           if (dicData && [dicData[@"code"] integerValue] == 1 && [[dicData allKeys] containsObject:@"data"]) {
                               
                               //1.保存用户信息
                               YKUserInfo *user = [YKUserInfo yy_modelWithDictionary:dicData[@"data"]];
                               
                               //MARK: Modify  time:2019.10.6 by:momo
                               id classUser = dicData[@"data"][@"server"];
                               if ([classUser isKindOfClass:[NSDictionary class]]) {
                                   NSDictionary *userDic = (NSDictionary *)classUser;
                                   user.port = [userDic[@"port"] integerValue];
                                   user.host = userDic[@"ip"];
                                   user.webapi = [userDic[@"webapi"] stringByReplacingOccurrencesOfString:K_APP_REQUEST_API withString:@""];
                                   user.webrtc = userDic[@"webrtc"];
                                   [YKUserInfoManager setUserInfo:user];
                                   //2.构建Socket环境
                                   [self createSocketConfig];
                                   
                                   if (successBack) {
                                       successBack(dicData);
                                   }
                               }else if ([classUser isKindOfClass:[NSArray class]]){
                                   NSArray *arrServer = (NSArray *)classUser;
                                   user.port = [arrServer[0][@"port"] integerValue];
                                   user.host = arrServer[0][@"ip"];
                                   user.webapi = [arrServer[0][@"webapi"] stringByReplacingOccurrencesOfString:K_APP_REQUEST_API withString:@""];
                                   user.webrtc = arrServer[0][@"webrtc"];
                                   [YKUserInfoManager setUserInfo:user];
                                   //2.构建Socket环境
                                   [self createSocketConfig];
                                   
                                   if (successBack) {
                                       successBack(dicData);
                                   }
                               }else{
                                   NSLog(@"服务配置不存在");
                               }
                           }
                           else{
                               dispatch_async(dispatch_get_main_queue(), ^{
                                   [MMProgressHUD showHUD:dicData?dicData[@"message"]:@"登录失败"];
                               });
                           }
                       }
                       failure:^(NSError * _Nullable error) {
                           NSLog(@"IM登录异常！详见：%@",error);
                           
                           dispatch_async(dispatch_get_main_queue(), ^{
                               [MMProgressHUD hideHUD];
                               [MMProgressHUD showHUD:error.localizedDescription];
                           });
                       }];
}

+ (void)checkUserOnlineWithUserId:(NSString *)userId
                         callBack:(void(^)(NSInteger status,NSError *error))callBack
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dict = @{
                           @"type":@"req",
                           @"cmd":@"checkUserOnline",
                           @"sessionID":[YKUserInfoManager userInfo].sessionID,
                           @"userID":userId
                           };
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_checkUserOnline requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        if ([data isKindOfClass:[NSDictionary class]]) {
            if ([data[@"result"] isEqualToString:@"1"]) {
                NSString *status = data[@"result"];
                callBack([status integerValue] ,nil);
            }else{
                callBack(0 ,error);
            }
        }else{
            callBack(0 ,error);
        }
    }];
}

+ (void)checkUserStatusCallBack:(void(^)(NSInteger status,NSError *error))callBack
{
    
    //1.构造参数
    NSDictionary *param = @{
                            @"cmd":@"userStatus",
                            @"sessionid":[YKUserInfoManager userInfo].sessionID
                            };
    
    //2.创建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:param success:^(id  _Nonnull responseObject) {
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            NSString *status = responseObject[@"status"];
            callBack([status integerValue] ,nil);
        }
    } failure:^(NSError * _Nonnull error) {
        callBack(0,error);
    }];
    
}


/**
 获取好友列表

 @param pIndex 页索引(第一页为0)
 @param pSize 页大小
 @param callBack 回调闭包
 */
+ (void)fetchFriendListForIndex:(NSInteger)pIndex
                        andSize:(NSInteger)pSize
                        andBack:(void(^)(NSArray<ContactsModel *> *_Nullable friendList,NSError *_Nullable error))callBack
{
    
    NSString *strUrl = [NSString stringWithFormat:@"%@api_im/friend/getfriendlist",K_APP_HOST_ADMIN3];
    
    NSDictionary *param = @{
                            @"userid":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].userId:@"",//必要  用户ID
                            @"page":[NSString stringWithFormat:@"%ld",pIndex], //非必要 当前页
                            @"perpage":[NSString stringWithFormat:@"%ld",pSize] //非必要 每页数量
                            };
    
    [YHUtils POSTWithURLString:strUrl
                    parameters:param
                       success:^(id  _Nullable responseObject) {
                           if (responseObject && [responseObject[@"code"] integerValue] == 1 && responseObject[@"data"]) {
                               NSArray<ContactsModel *> *arrTemp = [ContactsModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"][@"data"]];
                               
                               if (callBack) {
                                   callBack(arrTemp,nil);
                               }
                           }
                           else{
                               NSString *domain = @"NSURLErrorDomain";
                               NSString *desc = @"获取好友失败";
                               NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
                               NSError *error = [NSError errorWithDomain:domain
                                                                    code:0
                                                                userInfo:userInfo];
                               
                               if (callBack) {
                                   callBack(nil,error);
                               }
                           }
                       }
                       failure:^(NSError * _Nullable error) {
                           NSLog(@"获取好友列表异常！详见：%@",error);
                           
                           if (callBack) {
                               callBack(nil,error);
                           }
                       }];
}

+ (void)queryUserNormalWithContactType:(TargetType)targetType
                              callBack:(void(^)(NSArray <MMRecentContactsModel *>*friendList,NSError *error))callBack
{
    
    //0.初始化声明
    NSMutableArray *contactsDataList = [[NSMutableArray alloc] initWithCapacity:0];
    
    //1.构造参数
    NSDictionary *param = @{
                            @"cmd":@"queryUserNormal",
                            @"sessionId":[YKUserInfoManager userInfo].sessionID,
                            @"contactType":@(targetType).description
                            };
    
    //2.创建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:param success:^(id  _Nonnull responseObject) {
        
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            
            //2.1请求成功并且最近联系人不为零
            if ([responseObject[@"ret"] isEqualToString:@"succ"] && ![responseObject[@"count"] isEqualToString:@"0"]) {
                NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:responseObject[@"downloadurl"]] encoding:NSUTF8StringEncoding error:nil];
                NSMutableDictionary *jsonDic = [NSDictionary dictionaryWithXMLString:xmlStr].mutableCopy;
                [jsonDic removeObjectForKey:@"__name"];//去掉解析后带有__name的参数
                MMLog(@"我的最近列表%@",jsonDic);
                
                if ([jsonDic[@"item"] isKindOfClass:[NSDictionary class]]) {
                    
                    MMRecentContactsModel *model = [MMRecentContactsModel yy_modelWithDictionary:jsonDic[@"item"]];
                    [contactsDataList addObject:model];
                    
                }else{
                    
                    NSMutableArray *tempArr = [[NSMutableArray alloc] init];
                    [jsonDic[@"item"] enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                        NSDictionary *dict = (NSDictionary *)obj;
                        MMRecentContactsModel *model = [MMRecentContactsModel yy_modelWithDictionary:dict];
                        [tempArr addObject:model];
                    }];
                    
                    [contactsDataList addObjectsFromArray:tempArr];
                }
                
                callBack(contactsDataList, nil);
            }
            else{
//
//                NSString *domain = @"NSURLErrorDomain";
//                NSString *desc = @"您还没有联系群哦";
//                NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
//                NSError *error = [NSError errorWithDomain:domain
//                                                     code:0
//                                                 userInfo:userInfo];

                callBack(nil,nil);
            }
        }
    } failure:^(NSError * _Nonnull error) {
        callBack(nil,error);
    }];
}

+ (void)queryGroupCallBack:(void(^)(NSArray <MMGroupModel *>*groupList,NSError *error))callBack
{
    
    //0.初始化声明
    NSMutableArray *groupDataList = [NSMutableArray array];
    
    //1.构造参数
    NSDictionary *param = @{
                          @"cmd":@"group",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID
                          };
    
    //2.创建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:param success:^(id  _Nonnull responseObject) {
        
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            GetModel *getModel = [GetModel yy_modelWithDictionary:responseObject];
            NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:getModel.downloadurl] encoding:NSUTF8StringEncoding error:nil];
            NSMutableDictionary *jsonDic = [NSDictionary dictionaryWithXMLString:xmlStr].mutableCopy;
            [jsonDic removeObjectForKey:@"__name"];//去掉解析后带有__name的参数

            NSLog(@"我的群列表请求结果:%@",jsonDic);
            
            if ([jsonDic[@"result"] isEqualToString:@"1"]) {
                id objData = jsonDic[@"list"][@"group"];
                if (objData) {
                    //多个群为数组
                    if ([objData isKindOfClass:[NSArray classForCoder]]) {
                        NSArray *arr = jsonDic[@"list"][@"group"];
                        [arr enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                            NSDictionary *dict = (NSDictionary *)obj;
                            MMGroupModel *groupModel =  [MMGroupModel yy_modelWithDictionary:dict];
                            [groupDataList addObject:groupModel];
                        }];
                    //单个群为字典
                    } else{
                        MMGroupModel *contactsModel = [MMGroupModel yy_modelWithDictionary:objData];
                        [groupDataList addObject:contactsModel];
                    }
                }
                
                callBack(groupDataList,nil);
            }else{
                callBack(groupDataList,nil);
            }
        }
        
    } failure:^(NSError * _Nonnull error) {
        callBack(nil,error);
    }];
    
}

+ (void)logoutWithCallBack:(void(^)(NSError *error))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dict = @{
                           @"type":@"req",
                           @"cmd":@"logout",
                           @"xns":@"xns_user",
                           @"timeStamp":[MMDateHelper getNowTime],
                           };
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_logout requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        aCompletionBlock(error);
    }];
    
}


+ (void)aSendTextMessageWithModel:(MMMessage *)aMessage
                       completion:(void(^) (NSError *error))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSString *body = @"";
    MMRequestType requestType = MMRequestType_sendMsg;
    
    NSDictionary *sliceDic = @{
                               @"slice":@{
                                   @"type":aMessage.slice.type,
                                   @"content":aMessage.slice.content
                               }
                            };
    if ([aMessage.slice.type isEqualToString:@"linkman"]) {
        sliceDic = @{
                     @"slice":@{
                             @"type":aMessage.slice.type,
                             @"nickName":aMessage.slice.nickName?aMessage.slice.nickName:@"",
                             @"photo":aMessage.slice.photo?aMessage.slice.photo:@"",
                             @"userID":aMessage.slice.userID?aMessage.slice.userID:@"",
                             @"userName":aMessage.slice.userName?aMessage.slice.userName:@""
                             }
                     };
    }
    
    if ([aMessage.type isEqualToString:@"chat"]) {
        
        NSDictionary *dict = @{
                               @"type":aMessage.type,
                               @"cmd":aMessage.cmd,
                               @"sessionID":aMessage.sessionID,
                               @"toID":aMessage.toID,
                               @"toUserName":aMessage.toUserName,
                               @"msgID":aMessage.msgID,
                               @"msg":sliceDic,
                               };
        body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];
        requestType = MMRequestType_sendMsg;
    }else if ([aMessage.type isEqualToString:@"groupchat"]){
        
        NSDictionary *dict = @{
                               @"type":aMessage.type,
                               @"cmd":aMessage.cmd,
                               @"sessionID":aMessage.sessionID,
                               @"groupID":aMessage.toID,
                               @"msgID":aMessage.msgID,
                               @"msg":sliceDic,
                               };
        body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dict.innerXML];
        requestType = MMRequestType_sendGroupMsg;
    }
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:requestType requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        if ([data isKindOfClass:[NSDictionary class]]) {
            if ([data[@"result"] integerValue] == 1) {
                aCompletionBlock(nil);
            }
        }else{
            aCompletionBlock(error);
        }
    }];
}

+ (void)fetchUpLoadFileUrlCompletion:(void(^)(NSDictionary *dict,NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *fetchUrlDic = @{
                                  @"timeStamp":[MMDateHelper getNowTime],
                                  @"sessionID":[YKUserInfoManager userInfo].sessionID,
                                  @"userID":[YKUserInfoManager userInfo].userId,
                                  @"type":@"req",
                                  @"xns":@"xns_file",
                                  @"cmd":@"queryFileUpApiUrl",
                                  };
    
    //2.创建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:fetchUrlDic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil,error);
    }];
    
}

+ (void)upLoadFileWithFilePath:(NSString *)filePath
                       fileUrl:(NSString *)fileUrl
                    completion:(void(^)(NSData *data,NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *uploadDic = @{
                                   @"sessionID":[YKUserInfoManager userInfo].sessionID,
                                   @"uid":[YKUserInfoManager userInfo].userId,
                                   };
    NSURL *fileData = [ NSURL fileURLWithPath:filePath];//本地路径转成URL
    
    NSMutableDictionary *fileDic = [NSMutableDictionary dictionary];
    [fileDic setValue:fileData forKey:@"file"];//文件
    [fileDic setValue:@"uploadfile" forKey:@"name"];//后台约定好的文件名
    [fileDic setValue:[filePath lastPathComponent] forKey:@"fileName"];//获取名称
    NSArray *files =@[fileDic].mutableCopy;

    //2.构建上传请求
    MMApiClient *sharedClient = [MMApiClient sharedClient];
    sharedClient.responseSerializer = [AFHTTPResponseSerializer serializer];

    [sharedClient UPLOAD_FilePath:fileUrl parameters:uploadDic files:files progress:^(NSProgress * _Nonnull progress) {
        
    } success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        NSLog(@"文件上传失败！详见：%@",error);
        [MMProgressHUD showHUD: error.localizedDescription];
        
        aCompletionBlock(nil,error);
    }];
}

+ (void)aSendPicMessageWithModel:(MMMessage *)aMessage
                      completion:(void(^) (NSError *error))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSString *body = @"";
    MMRequestType requestType = MMRequestType_sendMsg;
    if ([aMessage.type isEqualToString:@"chat"]) {
        body = [NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><toID>%@</toID><toUserName>%@</toUserName><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><width>%f</width><height>%f</height></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.toUserName,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.width,aMessage.slice.height];
        requestType = MMRequestType_sendMsg;
    }else if ([aMessage.type isEqualToString:@"groupchat"]){
        body = [NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><groupID>%@</groupID><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><width>%f</width><height>%f</height></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.width,aMessage.slice.height];
        requestType = MMRequestType_sendGroupMsg;
    }
    
    
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:requestType requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        
        MMLog(@"发送图片消息的error=====%@\n返回的Rsp=======%@",error,data);
        if ([data isKindOfClass:[NSDictionary class]]) {
            if ([data[@"result"] isEqualToString:@"1"]) {
                aCompletionBlock(nil);
            }else{
                aCompletionBlock(error);
            }
        }else{
            aCompletionBlock(error);
        }
    }];

}

+ (void)aSendFileMessageWithModel:(MMMessage *)aMessage
                       completion:(void(^) (NSError *error))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSString *body = @"";
    MMRequestType requestType = MMRequestType_sendMsg;
    if ([aMessage.type isEqualToString:@"chat"]) {
        body = [NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><toID>%@</toID><toUserName>%@</toUserName><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><length>%@</length></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.toUserName,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.length];
        requestType = MMRequestType_sendMsg;
    }else if ([aMessage.type isEqualToString:@"groupchat"]){
        body =[NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><groupID>%@</groupID><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><length>%@</length></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.length];
        requestType = MMRequestType_sendGroupMsg;
    }
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:requestType requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        
        MMLog(@"发送文件消息的error=====%@\n返回的Rsp=======%@",error,data);
        if ([data isKindOfClass:[NSDictionary class]]) {
            if ([data[@"result"] isEqualToString:@"1"]) {
                aCompletionBlock(nil);
            }else{
                aCompletionBlock(error);
            }
        }else{
            aCompletionBlock(error);
        }
    }];

}

+ (void)aSendVoiceMessageWithModel:(MMMessage *)aMessage
                        completion:(void(^) (NSError *error))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];

    //2.构建TCP请求参数字符串
    NSString *body = @"";
    MMRequestType requestType = MMRequestType_sendMsg;
    if ([aMessage.type isEqualToString:@"chat"]) {
        body = [NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><toID>%@</toID><toUserName>%@</toUserName><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><duration>%ld</duration></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.toUserName,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.duration];        requestType = MMRequestType_sendMsg;
    }else if ([aMessage.type isEqualToString:@"groupchat"]){
        body = [NSString stringWithFormat:@"<JoyIM><type>%@</type><cmd>%@</cmd><sessionID>%@</sessionID><groupID>%@</groupID><msgID>%@</msgID><msg><slice><type>%@</type><content>%@</content><duration>%ld</duration></slice></msg></JoyIM>",aMessage.type,aMessage.cmd,aMessage.sessionID,aMessage.toID,aMessage.msgID,aMessage.slice.type,aMessage.slice.content,aMessage.slice.duration];
        requestType = MMRequestType_sendGroupMsg;
    }
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:requestType requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        
        MMLog(@"发送文件消息的error=====%@\n返回的Rsp=======%@",error,data);
        if ([data isKindOfClass:[NSDictionary class]]) {
            if ([data[@"result"] isEqualToString:@"1"]) {
                aCompletionBlock(nil);
            }else{
                aCompletionBlock(error);
            }
        }else{
            aCompletionBlock(error);
        }
    }];
}

+ (void)searchUserWithKey:(NSString *)key
                 startRow:(NSString *)startRow
                 rowCount:(NSString *)rowCount
              aCompletion:(void(^)(NSArray <SearchFriendModel *>*searchFriendList,NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dict = @{
                           @"keyword":key,
                           @"page":startRow,
                           @"perpage":rowCount,
                           };
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_2,@"searchUser"];
    
    //2.创建Post 表单请求
    [[MMApiClient sharedClient] POSTFormData:apiUrl parameters:dict success:^(id  _Nonnull responseObject) {
        
        MMLog(@"搜索好友请求结果：%@",responseObject);
        if(responseObject && [responseObject[@"code"] integerValue] == 1){

            NSArray <SearchFriendModel *> *arr = [SearchFriendModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"][@"data"]];
            aCompletionBlock(arr, nil);
        }
        else{
            
            NSString *domain = @"NSURLErrorDomain";
            NSString *desc = responseObject[@"data"];
            NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
            NSError *error = [NSError errorWithDomain:domain
                                                 code:0
                                             userInfo:userInfo];
            
            aCompletionBlock(nil, error);
        }
        
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}


/**
 查询组信息

 @param strKey 搜索关键字
 @param startRow 页索引(第一页 0)
 @param rowCount 页大小
 @param aCompletionBlock 回调
 */
+(void)searchGroupForName:(NSString * _Nonnull)strKey
                 startRow:(NSString * _Nonnull)startRow
                 rowCount:(NSString * _Nonnull)rowCount
              aCompletion:(void(^ _Nullable)(NSArray<MMGroupModel *> *_Nullable arrGroupList,NSError * _Nullable error))aCompletionBlock{
    
    //1.构造参数
    NSDictionary *dicParams = @{
                                   @"keyword":strKey,
                                   @"page":startRow,
                                   @"perpage":rowCount,
                               };
    
    NSString *strUrl = [NSString stringWithFormat:@"%@api_im/group/searchgroup",K_APP_HOST_ADMIN3];
    
    //2.构造Get请求
    [YHUtils POSTWithURLString:strUrl
                    parameters:dicParams
                       success:^(id  _Nullable responseObject) {
                    
                           if (responseObject && [responseObject[@"code"] integerValue] == 1) {
                               NSArray<MMGroupModel *> *_arrGroupList = [MMGroupModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"][@"data"]];
                               
                               aCompletionBlock(_arrGroupList,nil);
                           }
                           else{
                               NSString *domain = @"NSURLErrorDomain";
                               NSString *desc = responseObject?responseObject[@"message"]:@"搜索组失败";
                               NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
                               NSError *error = [NSError errorWithDomain:domain
                                                                    code:0
                                                                userInfo:userInfo];
                               
                               aCompletionBlock(nil, error);
                           }
                       }
                       failure:^(NSError * _Nullable error) {
                           aCompletionBlock(nil, error);
                       }];
}

+ (void)addFriendWithTargetId:(NSString *)tagUserid
                       andMsg:(NSString *)msg
                  aCompletion:(void(^)(NSDictionary *dic,NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"addFriend",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"tagUserid":tagUserid,
                          @"msg":msg
                          };

    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(dic, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}

+ (void)getUserInfoWithTargetId:(NSString *)taguserId
                    aCompletion:(void(^)(NSDictionary *dic,NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"getUserInfo",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"taguserId":taguserId
                          };
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:responseObject[@"downloadurl"]] encoding:NSUTF8StringEncoding error:nil];
        NSDictionary *jsonDic = [NSDictionary dictionaryWithXMLString:xmlStr];
        NSDictionary *dict = (NSDictionary *)(jsonDic[@"UserInfo"]);
        aCompletionBlock(dict,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}


+ (void)delFriendWithFriendId:(NSString *)friendId
                  aCompletion:(void(^)(NSDictionary *dic,NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"delFriend",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"friendId":friendId
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}


+ (void)fetchBulletionCompletion:(void(^)(NSArray <NewFriendModel *>*bulletionList,NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"fetchBulletin",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        
        NSMutableArray *requesFrieds = [[NSMutableArray alloc] init];
        
        NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:responseObject[@"downloadurl"]] encoding:NSUTF8StringEncoding error:nil];
        NSMutableDictionary *jsonDic = [NSMutableDictionary dictionaryWithXMLString:xmlStr].mutableCopy;
        [jsonDic removeObjectForKey:@"__name"];//删除带有__name的参数
        MMLog(@"%@",jsonDic);
        id bulletin = jsonDic[@"bulletinList"][@"bulletin"];
        if ([bulletin isKindOfClass:[NSArray class]]) {
            for (NSDictionary *dict in bulletin) {
                NewFriendModel *model = [NewFriendModel yy_modelWithDictionary:dict];
                [requesFrieds addObject:model];
            }
        }else{
            if (![jsonDic[@"bulletinList"] isKindOfClass:[NSDictionary class]]) {
                MMLog(@"经过这里了");
            }else{
                MMLog(@"我的天哪");
                NewFriendModel *model = [NewFriendModel yy_modelWithDictionary:bulletin];
                [requesFrieds addObject:model];
            }
        }
        
        aCompletionBlock(requesFrieds, nil);
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
}


+ (void)aNoticFriendsWithCmd:(NSString *)cmd
                   tagUserId:(NSString *)tagUserId
                        time:(NSString *)time
                         msg:(NSString *)msg
                 aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":cmd,
                          @"sessionid":[YKUserInfoManager userInfo].sessionID,
                          @"tagUserid":tagUserId,
                          @"time":time,
                          @"msg":msg,
                          @"groupid":@"0",
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            aCompletionBlock(responseObject, nil);
        }
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
}

+ (void)registerUserWithUserName:(NSString *)userName pwd:(NSString *)pwd
                     aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"username":userName,
                          @"cmd":@"interfaceAddUser",
                          @"userpsw":pwd,
                          @"gender":@"1",
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
}

+ (void)addGroupWithGroupName:(NSString *)groupName
                     bulletin:(NSString *)bulletin
                        theme:(NSString *)theme
                        photo:(NSString *)photo
                     userlist:(NSString *)userlist
                  aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"addGroup",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"groupName":groupName,
                          @"bulletin":bulletin,
                          @"theme":theme,
                          @"photo":@"",
                          @"userlist":userlist,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        MMLog(@"%@",responseObject);
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        MMLog(@"%@",error);
        aCompletionBlock(nil, error);
    }];
}

+ (void)remarkFriendWithtagUserId:(NSString *)taguserid
                           remark:(NSString *)remark
                      aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"userid":[YKUserInfoManager userInfo].userId,
                          @"muserid":taguserid,
                          @"musername":remark
                          };
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_3,@"setmemo"];
    
    //2.构造Post 表单请求
    [[MMApiClient sharedClient] POSTFormData:apiUrl parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"修改备注请求结果:%@",responseObject);
        if ([responseObject[@"code"] integerValue] == 1) {
            aCompletionBlock(responseObject, nil);
        }else{
            NSString *domain = @"NSURLErrorDomain";
            NSString *desc = responseObject[@"data"];
            NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
            NSError *error = [NSError errorWithDomain:domain
                                                 code:0
                                             userInfo:userInfo];
            
            aCompletionBlock(nil, error);
        }
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
    
}

+ (void)updateUserPhotoWithUserId:(NSString *)userId
                         photoUrl:(NSString *)photoUrl
                      aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{

    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"updateUserPhoto",
                          @"sessionid":[YKUserInfoManager userInfo].sessionID,
                          @"userId":userId,
                          @"photoUrl":photoUrl,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API
                         parameters:dic
                            success:^(id  _Nonnull responseObject) {
        MMLog(@"%@",responseObject);
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}

+ (void)setUserThemeWithUserId:(NSString *)userId
                         theme:(NSString *)theme
                   aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"userid":userId,
                          @"sig":theme
                          };
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_2,@"usersig"];
    
    //2.构建Post 表单请求
    [[MMApiClient sharedClient] POSTFormData:apiUrl parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"修改签名请求结果:%@",responseObject);
        if ([responseObject[@"code"] integerValue] == 1 && responseObject) {
            aCompletionBlock(responseObject, nil);
        }else{
            NSString *domain = @"NSURLErrorDomain";
            NSString *desc = responseObject[@"data"];
            NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
            NSError *error = [NSError errorWithDomain:domain
                                                 code:0
                                             userInfo:userInfo];
            
            aCompletionBlock(nil, error);
        }
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
    
}


/**
 获取群成员
 
 @param taggroupId 群id
 @param mode mode
 @param aCompletionBlock 结果返回
 */
+ (void)groupMemberWithtaggroupId:(NSString *_Nullable)taggroupId
                             mode:(NSString *_Nullable)mode
                      aCompletion:(void(^)(NSArray<MemberList *> *_Nullable memberList,NSString *_Nullable createId,NSError *_Nullable error))aCompletionBlock
{
    
    NSString *strURL = [NSString stringWithFormat:@"%@api_im/group/groupmember",K_APP_HOST_ADMIN3];
    
    NSDictionary *dicData = @{
                              @"groupid":taggroupId,
                              @"page":@"0",//第一页0
                              @"perpage":@"100"
                              };
    
    [YHUtils POSTWithURLString:strURL
                    parameters:dicData
                       success:^(id  _Nullable responseObject) {
                           
                           NSString *domain = @"NSURLErrorDomain";
                           NSString *desc = responseObject[@"message"];
                           NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
                           NSError *error = [NSError errorWithDomain:domain
                                                                code:0
                                                            userInfo:userInfo];
                           
                           if (responseObject && [responseObject[@"code"] integerValue] == 1) {
                               NSDictionary *_dicTemp = responseObject[@"data"][@"data"];
                               
                               //设置创建者编号
                               NSString *cid;
                               if (_dicTemp && [[_dicTemp allKeys] containsObject:@"createID"]) {
                                   cid = [NSString stringWithFormat:@"%@",_dicTemp[@"createID"]];
                               }
                               
                               if (_dicTemp && [[_dicTemp allKeys] containsObject:@"list"]) {
                                   NSArray<MemberList *> *_memberList = [MemberList mj_objectArrayWithKeyValuesArray:_dicTemp[@"list"]];
                                   
                                   aCompletionBlock(_memberList,cid, nil);
                               }
                               else
                                   aCompletionBlock(nil,nil, error);
                           }
                           else
                               aCompletionBlock(nil,nil, error);
                       }
                       failure:^(NSError *error) {
                           aCompletionBlock(nil,nil,error);
                       }];
}



+ (void)exitGroupWithGroupid:(NSString *)groupid msg:(NSString *)msg
                 aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"exitGroup",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"groupid":groupid,
                          @"msg":msg
                          };
    
    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock (nil, error);
    }];

}


//MARK: - 单聊(群聊)音频接受邀请响应
+ (void)acceptCallWithModel:(MMCallSessionModel *)model
                   callType:(NSInteger)callType
                   aCompletion:(void (^)(NSDictionary * _Nonnull, NSError * _Nonnull))aCompletionBlock
{
    
    //1.构建自定义配置环境
    [self createSocketConfig];
    
    //2.构建TCP请求参数字符串
    NSDictionary *dicParam = @{
                               @"type":@"req",
                               @"cmd":@"AcceptCall",
                               @"xns":@"xns_user",
                               @"timeStamp":[MMDateHelper getNowTime],
                               @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                               @"toId":model.fromId,
                               @"webrtcId":model.webrtcId,
                               @"media":@"",
                               @"callType":@(callType).description
                               };
    
    //群聊语音
    if (callType == 3) {
        dicParam = @{
                     @"type":@"req",
                     @"xns":@"xns_group",
                     @"timeStamp":[MMDateHelper getNowTime],
                     @"cmd":@"AcceptGroupCall",
                     @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                     @"fromId":[YKUserInfoManager userInfo].userId,
                     @"groupId":model.toId,
                     @"webrtcId":model.webrtcId,
                     @"startId":@"0",
                     @"callType":@"3"
                     };
    }
    
    NSString *body = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dicParam.innerXML];
    
    MMLog(@"单聊(群聊)音频接受邀请响应参数......%@",body);
    
    //3.创建请求的Manager
    [[MMGCDAsyncSocketCommunicationManager sharedInstance] socketWriteDataWithRequestType:MMRequestType_acceptCall requestBody:body completion:^(NSError * _Nullable error, id  _Nullable data) {
        aCompletionBlock(data,error);
    }];

}


/**
 * 邀请好友入群
 */
+ (void)inviteFrd2GroupWithGroupId:(NSString *)groupId
                          friendId:(NSString *)friendId
                       aCompletion:(void (^)(NSDictionary * dic, NSError * error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"inviteFrd2Group",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"groupid":groupId,
                          @"friendId":friendId
                          };
    
    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock (nil, error);
    }];
    
}

+ (void)kickGroupMemberWithGroupId:(NSString *)groupId
                          memberId:(NSString *)memberId
                       aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"kickGroupMember",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"groupid":groupId,
                          @"memberId":memberId
                    };
    
    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock (nil, error);
    }];

}


+ (void)deleteGroupWithGroupId:(NSString *)groupId
                     groupName:(NSString *)groupName
                   aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"deleteGroup",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"groupid":groupId,
                          @"GroupName":groupName,
                          };
    
    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock (nil, error);
    }];

}

+ (void)setUserInfoWithUserName:(NSString *)userName
                    aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构建参数
    NSDictionary *dic = @{
                          @"cmd":@"setUserInfo",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"nickName":userName,
                          };
    
    //2.构建Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject, nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock (nil, error);
    }];

}

+ (void)fetchLeaveMsgWithStartTime:(NSString *)startTime endTime:(NSString *)endTime
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"fetchLeaveMsg",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        
        NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:responseObject[@"downloadurl"]] encoding:NSUTF8StringEncoding error:nil];
        NSMutableDictionary *jsonDic = [NSMutableDictionary dictionaryWithXMLString:xmlStr].mutableCopy;
        [jsonDic removeObjectForKey:@"__name"];//删除带有__name的参数
        
        MMLog(@"%@",jsonDic);
        
        if ([jsonDic[@"user"] isKindOfClass:[NSDictionary class]]) {
            
            //2.1创建一个list字典,对应处理数据
            NSDictionary *dict = @{
                                          @"list":jsonDic
                                          };
            //2.2对应处理数据
            [[MMClient  sharedClient] addHandleChatMessage:dict];
            
        }else{
            
            NSArray *array = jsonDic[@"user"];
            [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                NSDictionary *dict = @{
                                       @"list":@{@"user":array[idx]}
                                       };
                //2.2对应处理数据
                [[MMClient  sharedClient] addHandleChatMessage:dict];
            }];
            
        }

        
    } failure:^(NSError * _Nonnull error) {
        [MMProgressHUD showHUD:MMDescriptionForError(error)];
    }];
    
}


+ (void)groupWordWithStartTime:(NSString *)startTime endTime:(NSString *)endTime
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"groupWord",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"%@",responseObject);
        NSString *xmlStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:responseObject[@"downloadurl"]] encoding:NSUTF8StringEncoding error:nil];
        NSMutableDictionary *jsonDic = [NSMutableDictionary dictionaryWithXMLString:xmlStr].mutableCopy;
        [jsonDic removeObjectForKey:@"__name"];//删除带有__name的参数
        
        MMLog(@"%@",jsonDic);
        
        if ([jsonDic[@"group"] isKindOfClass:[NSDictionary class]]) {
            
            //2.1创建一个list字典,对应处理数据
            NSDictionary *dict = @{
                                   @"list":jsonDic
                                   };
            //2.2对应处理数据26
            [[MMClient  sharedClient] addHandleGroupMessage:dict];
            
        }else{
            
            NSArray *array = jsonDic[@"group"];
            [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                NSDictionary *dict = @{
                                       @"list":@{@"group":array[idx]}
                                       };
                //2.2对应处理数据
                [[MMClient  sharedClient] addHandleGroupMessage:dict];
            }];
            
        }
        
        
    } failure:^(NSError * _Nonnull error) {
        [MMProgressHUD showHUD:MMDescriptionForError(error)];
    }];

}

/**
 获取单聊历史记录
 
 @param relateID 双方通信的另一方UserID
 @param startTime 开始时间
 @param start 开始页
 @param count 条数
 @param keyword 聊天内容关键字(可用来搜索记录，空或者不传，不进行筛选)
 */
+ (void)fetchMsgHisWithRelateID:(NSString * _Nonnull)relateID
                      startTime:(NSString * _Nullable)startTime
                        endTime:(NSString * _Nullable)endTime
                          start:(NSString * _Nonnull)start
                          count:(NSString * _Nonnull)count
                     strKeyword:(NSString * _Nullable)keyword
                    aCompletion:(void(^)(NSArray *arr, NSError *error))aCompletionBlock
{
    
    NSString *strUrl = [NSString stringWithFormat:@"%@api_im/msg/getmsghis",K_APP_HOST_ADMIN3];
    //接口说明：http://apidoc.joysw.cn/web/#/1?page_id=1384
    NSMutableDictionary *dicParams = [NSMutableDictionary
                                      dictionaryWithDictionary:@{
                                                                 @"toid":relateID,
                                                                 @"startime":startTime,
                                                                 @"endtime":endTime,
                                                                 @"page":start,
                                                                 @"perpage":count,
                                                                 @"userid":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].userId:@""
                                                                 }];
    if (keyword.checkTextEmpty) {
        [dicParams setValue:keyword forKey:keyword];
    }
    
    [YHUtils POSTWithURLString:strUrl
                    parameters:dicParams
                       success:^(id  _Nullable responseObject) {
                           
                           NSString *domain = @"NSURLErrorDomain";
                           NSString *desc = responseObject[@"message"];
                           NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
                           NSError *error = [NSError errorWithDomain:domain
                                                                code:0
                                                            userInfo:userInfo];
                           
                           if (responseObject && [responseObject[@"code"] integerValue] == 1) {
                               NSMutableArray *array = [NSMutableArray array];
                               
                               if (responseObject[@"data"][@"data"]) {
                                   NSArray *result = responseObject[@"data"][@"data"];
                                   result = [result sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {
                                       NSString *time1 = obj1[@"dTime"];
                                       NSString *time2 = obj2[@"dTime"];
                                       return [time2 compare:time1]; //降序
                                   }];
                                   
                                   [result enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
   
                                       NSMutableDictionary *dic = [NSMutableDictionary dictionaryWithDictionary:@{@"isInsert":@"YES"}];
                                       [dic addEntriesFromDictionary:obj];
   
                                      NSDictionary *dict = @{
                                                             @"list":@{@"user":dic}
                                                             };
                                      //2.2.1对应处理数据
                                      [[MMClient  sharedClient] addHandleChatMessage:dict];
                                   }];
                                   
                                   [array addObjectsFromArray:result];
                               }
                               
                               aCompletionBlock(array,nil);
                           }
                           else{
                               aCompletionBlock(nil,error);
                           }
                       } failure:^(NSError *error) {
                           MMLog(@"单聊历史记录同步异常！详见：%@",error);
                           aCompletionBlock(nil,error);
                       }];
}

/**
 获取群聊历史记录
 
 @param groupID 群编号
 @param startTime 开始时间
 @param start 开始页
 @param keyword 立即搜索关键字(非必填项)
 @param count 条数
 */
+ (void)fetchMsgHisWithGroupID:(NSString * _Nonnull)groupID
                     startTime:(NSString * _Nullable)startTime
                       endTime:(NSString * _Nullable)endTime
                         start:(NSString * _Nonnull)start
                    strKeyword:(NSString * _Nullable)keyword
                         count:(NSString * _Nonnull)count
                   aCompletion:(void(^)(NSArray *arr, NSError *error))aCompletionBlock
{
    
    NSString *strUrl = [NSString stringWithFormat:@"%@/api_im/msg/getgroupmsghis",K_APP_HOST_ADMIN3];
    
    /**
     * groupid  必要    群组ID
     startime 非必要  开始时间 2019-04-10 17:19:01
     endtime 非必要   结束时间 2019-04-10 17:19:01
     keyword 非必要   内容关键字
     page 非必要      当前页
     perpage 非必要   每页数量
     */
    NSMutableDictionary *dicParams = [NSMutableDictionary
                                      dictionaryWithDictionary:@{
                                                                 @"groupid":groupID,
                                                                 @"startime":startTime,
                                                                 @"endtime":endTime,
                                                                 @"page":start,
                                                                 @"perpage":count
                                                                 }];
    if (keyword.checkTextEmpty) {
        [dicParams setValue:keyword forKey:@"keyword"];
    }
    
    [YHUtils POSTWithURLString:strUrl
                    parameters:dicParams
                       success:^(id  _Nullable responseObject) {
                           NSString *domain = @"NSURLErrorDomain";
                           NSString *desc = responseObject[@"message"];
                           NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
                           NSError *error = [NSError errorWithDomain:domain
                                                                code:0
                                                            userInfo:userInfo];
                           
                           if (responseObject && [responseObject[@"code"] integerValue] == 1) {
                               NSMutableArray *array = [NSMutableArray array];
                               
                               if (responseObject[@"data"][@"data"]) {
                                   NSArray *result = responseObject[@"data"][@"data"][@"msg"];
                                   
                                   NSString *strGroupName = [NSString stringWithFormat:@"%@",responseObject[@"data"][@"data"][@"groupName"]];
                                   
                                   result = [result sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {
                                       NSString *time1 = obj1[@"dTime"];
                                       NSString *time2 = obj2[@"dTime"];
                                       return [time2 compare:time1]; //降序
                                   }];
                                   
                                   [result enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                                       
                                       NSMutableDictionary *dic = [NSMutableDictionary dictionaryWithDictionary:@{@"isInsert":@"YES",@"groupName":strGroupName}];
                                       [dic addEntriesFromDictionary:obj];
                                       
                                       NSDictionary *dict = @{
                                                              @"list":@{@"group":dic}
                                                              };
                                       //2.2.1对应处理数据
                                       [[MMClient  sharedClient] addHandleGroupMessage:dict];
                                   }];
                                   
                                   [array addObjectsFromArray:result];
                               }
                               
                               aCompletionBlock(array,nil);
                           }
                           else{
                               aCompletionBlock(nil,error);
                           }
                       }
                       failure:^(NSError * _Nullable error) {
                           MMLog(@"群聊历史记录同步异常！详见：%@",error);
                           aCompletionBlock(nil,error);
                       }];
}



+ (void)addUserNormalWithTagType:(NSString *)tagType
                           tagid:(NSString *)tagid
                         tagname:(NSString *)tagname
                     aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"addUserNormal",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"tagType":tagType,
                          @"tagid":tagid,
                          @"tagname":tagname,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API parameters:dic success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil,error);
    }];

}

+ (void)delUserNormalWithTagType:(NSString *)tagType
                           tagid:(NSString *)tagid
                     aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"cmd":@"delUserNormal",
                          @"sessionId":[YKUserInfoManager userInfo].sessionID,
                          @"tagType":tagType,
                          @"tagid":tagid,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:K_APP_REQUEST_API
                         parameters:dic
                            success:^(id  _Nonnull responseObject) {
        aCompletionBlock(responseObject,nil);
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil,error);
    }];
    
}

+ (void)setUserInfoWithUserId:(NSString *)userId
                        email:(NSString *)email
                       mobile:(NSString *)mobile
                    telephone:(NSString *)telephone
                     nickName:(NSString *)nickName
                      company:(NSString *)company
                       depart:(NSString *)depart
                  aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.构造参数
    NSDictionary *dic = @{
                          @"userid":userId,
                          @"email":email.length ? email : @"",
                          @"mobile":mobile.length ? mobile : @"",
                          @"telephone":telephone.length ? telephone : @"",
                          @"nickname":nickName.length ? nickName : @"",
                          @"company":company.length ? company : @"",
                          @"depart":depart.length ? depart : @"",
                          };
    
    //2.构建Get请求
    
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_2,@"update"];
    
    [[MMApiClient sharedClient] POSTFormData:apiUrl
                                  parameters:dic
                                     success:^(id  _Nonnull responseObject) {
        
        MMLog(@"用户信息请求结果：%@",responseObject);
        if(responseObject && [responseObject[@"code"] integerValue] == 1){
            
            aCompletionBlock(responseObject, nil);
        }
        else{
            NSString *domain = @"NSURLErrorDomain";
            NSString *desc = responseObject[@"data"];
            NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
            NSError *error = [NSError errorWithDomain:domain
                                                 code:0
                                             userInfo:userInfo];
            
            aCompletionBlock(nil, error);
        }
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];

}


+ (void)getUserInfoWithUserId:(NSString *)userId
                  aCompletion:(void(^)(YKUserInfo *_Nullable model, NSError *_Nullable error))aCompletionBlock;
{
    
    NSDictionary *dic = @{
                          @"userid":userId
                          };
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_2,@"userinfo"];

    [[MMApiClient sharedClient] POSTFormData:apiUrl
                                  parameters:dic
                                     success:^(id  _Nonnull responseObject) {
      
         NSDictionary *dicTemp = responseObject;
         if (![responseObject isKindOfClass:[NSDictionary class]]) {
             dicTemp = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
         }
                                         
         NSString *domain = @"NSURLErrorDomain";
                                         NSString *desc = [[dicTemp allKeys] containsObject:@"msg"]?dicTemp[@"msg"]:@"用户信息加载失败";
         NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
         NSError *error = [NSError errorWithDomain:domain
                                              code:0
                                          userInfo:userInfo];
                                         
        MMLog(@"用户信息请求结果：%@",dicTemp);
        if(dicTemp && [dicTemp[@"code"] integerValue] == 1){
   
            NSMutableDictionary *muDicTemp = [NSMutableDictionary dictionaryWithDictionary:dicTemp[@"data"]];
            NSArray *arrKeys = [muDicTemp allKeys];
            
            //PhotpUrl => photoUrl
            if (arrKeys && [arrKeys containsObject:@"PhotpUrl"] && ![arrKeys containsObject:@"photoUrl"]) {
                [muDicTemp setValue:muDicTemp[@"PhotpUrl"] forKey:@"photoUrl"];
            }
            
            //userid => userId
            if (arrKeys && [arrKeys containsObject:@"userid"] && ![arrKeys containsObject:@"userId"]) {
                [muDicTemp setValue:muDicTemp[@"userid"] forKey:@"userId"];
            }
            
            //usersig => userSig
            if (arrKeys && [arrKeys containsObject:@"usersig"] && ![arrKeys containsObject:@"userSig"]) {
                [muDicTemp setValue:muDicTemp[@"usersig"] forKey:@"userSig"];
            }
            
            //username => userName
            if (arrKeys && [arrKeys containsObject:@"username"] && ![arrKeys containsObject:@"userName"]) {
                [muDicTemp setValue:muDicTemp[@"username"] forKey:@"userName"];
            }
            
            YKUserInfo *model = [YKUserInfo yy_modelWithDictionary:muDicTemp];
            if (!model){
                desc = @"用户信息不存在";
                userInfo = @{ NSLocalizedDescriptionKey : desc };
                error = [NSError errorWithDomain:domain
                                            code:0
                                        userInfo:userInfo];
                aCompletionBlock(nil, error);
            }
            else
                aCompletionBlock(model, nil);
        }
        else{
            aCompletionBlock(nil, error);
        }
    } failure:^(NSError * _Nonnull error) {
        MMLog(@"用户信息请求异常!详见：%@",error);
        aCompletionBlock(nil, error);
    }];
}


//=====================================Model解析==================================/

+ (void)fetchTopicGroupListWithUserId:(NSString *)userId
                                  gid:(NSInteger)gid
                                 page:(NSInteger)page
                                limit:(NSInteger)limit
                           completion:(void(^)(NSArray <MMClassListModel *>*arr, NSError *error))aCompletionBlock
{
    
    //1.配置URL
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",TOP_CIRCLE_URL,@"api/topic/list"];
    NSDictionary *dic = @{
                             @"userId":userId,
                              @"gid":@(gid).description,
                              @"page":@(page).description,
                              @"limit":@(limit).description,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:baseUrl parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"%@",responseObject);
        
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            if ([responseObject[@"code"] integerValue] == 1) {
                NSArray <MMClassListModel *> *arr  = [MMClassListModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"]];
                MMLog(@"%@",arr);
                aCompletionBlock(arr,nil);
            }else{
                aCompletionBlock(nil,nil);
            }
        }        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil,error);
    }];

}

+ (void)fetchClassDetailWithUserId:(NSString *)userId
                               did:(NSInteger)did
                        completion:(void(^)(NSArray <MMClassListModel *>*arr, NSError *error))aCompletionBlock
{
    //1.配置URL
    NSString *baseUrl = [NSString stringWithFormat:@"%@%@",TOP_CIRCLE_URL,@"api/topic/content"];
    NSDictionary *dic = @{
                          @"userId":userId,
                          @"did":@(did).description,
                          };
    
    //2.构造Get请求
    [[MMApiClient sharedClient] GET:baseUrl parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"%@",responseObject);
        
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            if ([responseObject[@"code"] integerValue] == 1 && [responseObject containsObject:responseObject[@"data"]]) {
                NSArray <MMClassListModel *> *arr  = [MMClassListModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"]];
                MMLog(@"%@",arr);
                aCompletionBlock(arr,nil);
            }else{
                aCompletionBlock(nil,nil);
            }
        }
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil,error);
    }];

}

+ (void)modifyPasswordWithUserId:(NSString *)userId
                        password:(NSString *)password
                     aCompletion:(void(^)(NSDictionary *dic, NSError *error))aCompletionBlock
{
    
    //1.配置参数
    
    NSDictionary *dic = @{
                          @"userid":userId,
                          @"password":password
                          };
    NSString *apiUrl = [NSString stringWithFormat:@"%@%@%@",TOP_CIRCLE_URL,K_APP_REQUEST_API_2,@"password"];
    
    //2.构建Post 表单请求
    [[MMApiClient sharedClient] POSTFormData:apiUrl parameters:dic success:^(id  _Nonnull responseObject) {
        
        MMLog(@"修改密码")
        if (responseObject && [responseObject[@"code"] integerValue] == 1) {
            
            aCompletionBlock(responseObject,nil);
            
        }else{
            NSString *domain = @"NSURLErrorDomain";
            NSString *desc = responseObject[@"data"];
            NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };
            NSError *error = [NSError errorWithDomain:domain
                                                 code:0
                                             userInfo:userInfo];
            
            aCompletionBlock(nil, error);

        }
        
    } failure:^(NSError * _Nonnull error) {
        aCompletionBlock(nil, error);
    }];
    
}


//MARK: - 聊天室逻辑处理
/**
 退出当前聊天室
 
 @param roomId 聊天室编号
 @param strPwd 聊天室密码 //md5,可以为空,聊天室用
 @param strMsg 消息
 @param finshback 完成回调
 */
+ (void)liveRoomExitForRoomId:(NSString *_Nonnull)roomId
                       AndPwd:(NSString *_Nullable)strPwd
                       AndMsg:(NSString *_Nullable)strMsg
                andFinishBack:(void(^_Nullable)(id _Nullable responseData,NSString *_Nullable strError))finshback{
    
    NSDictionary *dicParams = @{
                                @"type":@"req",
                                @"cmd":@"exitChatRoom",
                                @"timeStamp":[MMDateHelper getNowTime],
                                @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                                @"passwd":strPwd?strPwd:@"",
                                @"ChatRoomID":roomId,
                                @"msg":strMsg?strMsg:@"你好！我要离开了"
                                };
    
    
    NSString *strBody = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dicParams.innerXML];
    
    [[MMGCDAsyncSocketCommunicationManager sharedInstance]
     socketWriteDataWithRequestType:(MMRequestType_exitChatRoom)
     requestBody:strBody
     completion:^(NSError * _Nullable error, id  _Nullable data) {
         NSLog(@"离开聊天室：%@,error:%@",data,error);
         
         NSDictionary *dicTemp = data;
         if ([data isKindOfClass:[NSDictionary class]]) {
             if ([[dicTemp allKeys] containsObject:@"err"]) {
                 [MMProgressHUD showHUD:dicTemp[@"err"]];
             }
             else{
                 //发送离开聊天室的通知
                 [[NSNotificationCenter defaultCenter]
                  postNotificationName:K_EXIT_ChAT_ROOM
                  object:nil
                  userInfo:@{
                             K_CHAT_ROMM_ID:dicTemp[K_CHAT_ROMM_ID],
                             K_CHAT_USER_ID:dicTemp[K_CHAT_USER_ID]
                             }];
                 
                 finshback(data,nil);
             }
         }
         else{
             NSLog(@"离开聊天室失败！详见：%@",error);
             [MBProgressHUD showError:error.localizedDescription];
         }
     }];
}

/**
 聊天室发送消息/礼物/红包
 http://apidoc.joysw.cn/web/#/1?page_id=63
 
 @param roomId 聊天室编号
 @param strMsg 消息内容
 @param giftDic 礼物对象(没有传空)
         @{
           @"giftcount":@"礼物数量",
           @"gift":@"礼物编号",
           @"toID":@"如为0则是发送给聊天室所有人，否则发给指定toID的人"
         }
 @param redPacketDic 红包对象(没有传空)
         @{
            @"money":@"红包金额",
            @"toID":@"如为0则是发送给聊天室所有人，否则发给指定toID的人"
         }
 @param finshback 事件完成回调
 */
+ (void)liveRoomSendMessageOrGiftForRoomId:(NSString *_Nonnull)roomId
                                AndMessage:(NSString *_Nullable)strMsg
                                  orGiftDic:(NSDictionary *_Nullable)giftDic
                             orRedPacketDic:(NSDictionary *_Nullable)redPacketDic
                             andFinishBack:(void(^_Nullable)(id _Nullable responseData,NSString *_Nullable strError))finshback{
    
    //消息对象、礼物编号、红包编号至少有一个不为空
    if (!strMsg && !giftDic && !redPacketDic) {
        [MMProgressHUD showHUD:@"参数有误"];
        return;
    }
    
    NSMutableDictionary *dicParams = [NSMutableDictionary
                      dictionaryWithDictionary:@{
                                                 @"type":@"req",
                                                 @"cmd":@"sendChatRoomMsg",
                                                 @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                                                 //发送者ID
                                                 @"fromID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].userId:@"",
                                                 //发送者的名字
                                                 @"senderName":[YKUserInfoManager userInfo].getUName,
                                                 //聊天室ID
                                                 @"ChatRoomID":roomId,
                                                 //如为0则是发送给聊天室所有人，否则发给指定toID的人
                                                 @"toID":@"0",
                                                 @"msgType":@"broadcast"
                                                 }];
    
    //设置消息
    if (strMsg) {
        [dicParams setValue:strMsg forKey:@"msg"];
    }
    
    //礼物,标签中不能什么也不填否则服务端解析出错,0-无礼物
    if (giftDic) {
        [dicParams setValue:giftDic[@"gift"] forKey:@"gift"];
        [dicParams setValue:giftDic[@"giftcount"] forKey:@"giftcount"];
        [dicParams setValue:redPacketDic[@"toID"] forKey:@"toID"];
    }
    else{
        [dicParams setValue:@"0" forKey:@"gift"];
        [dicParams setValue:@"0" forKey:@"giftcount"];
    }
    
    //红包,标签中不能什么也不填否则服务端解析出错，0-无红包
    if (redPacketDic) {
        [dicParams setValue:redPacketDic[@"money"] forKey:@"money"];
        [dicParams setValue:redPacketDic[@"toID"] forKey:@"toID"];
    }
    else{
        [dicParams setValue:@"0" forKey:@"money"];
    }
    
    NSString *strBody = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dicParams.innerXML];
    
    [[MMGCDAsyncSocketCommunicationManager sharedInstance]
     socketWriteDataWithRequestType:(MMRequestType_sendChatRoomMsg)
                        requestBody:strBody
                         completion:^(NSError * _Nullable error, id  _Nullable data) {
                             NSLog(@"聊天室消息发送：%@,error:%@",data,error);
                             
                             if (!data && error) {
                                 NSLog(@"聊天室消息发送 dicParams:%@",dicParams);
                                 
                                 dispatch_async(dispatch_get_main_queue(), ^{
                                     [MBProgressHUD showError:error.localizedDescription];
                                 });
                                 return;
                             }
                             
                             NSDictionary *dicTemp = data;
                             if (![data isKindOfClass:[NSDictionary class]]) {
                                 dicTemp = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];
                             }
                    
                             //成功返回1
                             if (([[dicTemp allKeys] containsObject:@"result"] && [dicTemp[@"result"] integerValue] == 1) || ![[dicTemp allKeys] containsObject:@"err"]) {
                                 finshback(dicTemp,nil);
                             }
                             else{
                                 NSLog(@"聊天室消息发送失败！详见：%@",error);
                                 
                                 dispatch_async(dispatch_get_main_queue(), ^{
                                     [MBProgressHUD showError:error.localizedDescription];
                                 });
                             }
                         }];
}



/**
 加入聊天室

 @param strRoomId 聊天室编号
 @param strPwd 聊天室密码 //md5,可以为空,聊天室用
 @param strMsg 加入信息
 @param finishBack 操作回调
 */
+ (void)liveRoomJoinForRoomId:(NSString *_Nonnull)strRoomId
                       AndPwd:(NSString *_Nullable)strPwd
                   AndMessage:(NSString *_Nullable)strMsg
                AndFinishBack:(void(^_Nullable)(NSString *strError,id _Nullable responseData))finishBack{
    
    [MBProgressHUD showMessage:@"加入中..."];
    NSDictionary *dicParams = @{
                                @"type":@"req",
                                @"cmd":@"joinChatRoom",
                                @"timeStamp":[MMDateHelper getNowTime],
                                @"sessionID":[YKUserInfoManager userInfo]?[YKUserInfoManager userInfo].sessionID:@"",
                                @"passwd":strPwd?strPwd:@"",
                                @"ChatRoomID":strRoomId,
                                @"msg":@"你好！我想加入聊天室"
                                };
    
    NSString *strBody = [NSString stringWithFormat:@"<JoyIM>%@</JoyIM>",dicParams.innerXML];

    [[MMGCDAsyncSocketCommunicationManager sharedInstance]
     socketWriteDataWithRequestType:(MMRequestType_joinChatRoom)
     requestBody:strBody
     completion:^(NSError * _Nullable error, id  _Nullable data) {
         NSLog(@"加入聊天室：%@,error:%@",data,error);
         
         dispatch_async(dispatch_get_main_queue(), ^{
             [MBProgressHUD hideHUD];
         });
         
         if (!data && error) {
             NSLog(@"加入聊天室 dicParams:%@",dicParams);
             
             dispatch_async(dispatch_get_main_queue(), ^{
                 [MMProgressHUD showHUD:error.localizedDescription];
             });
             
             return;
         }
         
         NSDictionary *dicTemp = data;
         if (![data isKindOfClass:[NSDictionary class]]){
             dicTemp = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];
         }
         
         if (finishBack) {
             if ([[dicTemp allKeys] containsObject:@"err"]) {
                 dispatch_async(dispatch_get_main_queue(), ^{
                     [MMProgressHUD showHUD:dicTemp[@"err"]];
                 });
             }
             else{
                 finishBack(nil,dicTemp);
                 
                 NSString *strUId = [NSString stringWithFormat:@"%@",dicTemp[K_CHAT_USER_ID]];
                 
                 //发送进入聊天室的通知
                 [[NSNotificationCenter defaultCenter]
                  postNotificationName:K_JOIN_ChAT_ROOM
                  object:nil
                  userInfo:@{
                             K_CHAT_ROMM_ID:dicTemp[K_CHAT_ROMM_ID],
                             K_CHAT_USER_ID:strUId
                             }];
             }
         }
     }];
}

@end
