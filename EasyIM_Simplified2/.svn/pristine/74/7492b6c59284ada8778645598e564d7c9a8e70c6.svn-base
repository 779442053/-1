//
//  ChatViewController.m
//  EasyIM
//
//  Created by apple on 2019/8/20.
//  Copyright © 2019 Looker. All rights reserved.
//

#import "ChatViewController.h"
#import "MMChatManager.h"
#import "KinTabBarController.h"
#import "ContactTableViewCell.h"
#import "SearchFriendsViewController.h"
#import "MMTools.h"

//相册
#import <Photos/Photos.h>

//群聊
#import "NewGroupViewController.h"

//下拉菜单列表
#import <YBPopupMenu.h>

//扫一扫
#import "SweepViewController.h"

static NSString *const identifier = @"ContactTableViewCell";
static CGFloat const foot_view_empty_h = 150;

@interface ChatViewController ()<UITableViewDelegate,UITableViewDataSource,MMChatManager,YBPopupMenuDelegate,SweepViewControllerDelegate>

//最近联系人
@property (nonatomic, strong) NSMutableArray *laterPersonDataArr;
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, strong) UIView *emptyView;

@end

@implementation ChatViewController
    
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    [self initView];
}
    
- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    
    self.navgationTitle = @"聊天";
    self.tabBarController.navigationItem.leftBarButtonItem  = nil;
    self.tabBarController.navigationItem.rightBarButtonItem  = nil;
    
    //MARK:设置总的未读消息数
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        [self setTotalUnReadCount];
    });
    
    //MARK:获取本地最近联系人
    [self queryDataFromDB];
    
    //MARK:右边栏工具
    [self barItem];
}
 
- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:NEARLYLISTRELOAD object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:CONTACTS_RELOAD object:nil];
}
    

//MARK: - initView
-(void)initView{
    [self.view addSubview:self.tableView];
    
    //2.注册通知
    [self registerNotic];
    
    //3.设置成当前的VC
    [MMClient sharedClient].chatListViewC = self;
    [[MMClient sharedClient] addDelegate:self];
}

- (void)barItem
{
    //搜索
    UIButton *rightSearch = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 44, 44)];
    [rightSearch addTarget:self action:@selector(rightAction)forControlEvents:UIControlEventTouchUpInside];
    [rightSearch setImage:[UIImage imageNamed:@"contact_search"] forState:UIControlStateNormal];
    
    //添加
    UIButton *rightPluss = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 44, 44)];
    [rightPluss addTarget:self action:@selector(rightBarButtonClicked:)forControlEvents:UIControlEventTouchUpInside];
    [rightPluss setImage:[UIImage imageNamed:@"添加"] forState:UIControlStateNormal];
    
    self.tabBarController.navigationItem.rightBarButtonItems = @[
                                                                 [[UIBarButtonItem alloc] initWithCustomView:rightSearch],
                                                                 [[UIBarButtonItem alloc] initWithCustomView:rightPluss],
                                                                 
    ];
    
}


//MARK: - 右边工具栏
- (void)rightBarButtonClicked:(UIButton *)sender
{
    
    //MARK: 下拉
    NSArray *titles = @[
                        @"发起群聊",
                        @"加好友",
                        @"扫一扫",
                        @"帮助",
                        ];
    NSArray *icons = @[
                       @"群聊",
                       @"添加好友",
                       @"扫一扫",
                       @"帮助"
                       ];
    
    [YBPopupMenu showRelyOnView:sender titles:titles icons:icons menuWidth:150.0f otherSettings:^(YBPopupMenu *popupMenu) {
        popupMenu.dismissOnSelected = YES;
        popupMenu.isShowShadow = NO;
        popupMenu.delegate = (id<YBPopupMenuDelegate>)self;
        popupMenu.offset = 10;
        popupMenu.type = YBPopupMenuTypeDefault;
        popupMenu.rectCorner = UIRectCornerBottomRight;
    }];
    
}


//MARK: - 搜索
- (void)rightAction{
    SearchFriendsViewController *searchVC = [[SearchFriendsViewController alloc] init];
    searchVC.item = MMConGroup_Friend;
    [self.navigationController pushViewController:searchVC animated:YES];
}
   
    
//MARK: - 注册通知
- (void)registerNotic
{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noticReload:) name:NEARLYLISTRELOAD object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noticReload:) name:CONTACTS_RELOAD object:nil];
}
    
// 通知常用联系人/常用联系群 重新加载数据
- (void)noticReload:(NSNotification *) notification
{
    
    NSString *tagType = notification.userInfo[@"tagType"];
    if ([tagType isEqualToString:@"12"]) {
        [self loadData:TargetType_TopC];
    }else{
        [self loadData:TargetType_ComG];
    }
}
    
// 请求加载数据
- (void)loadData:(TargetType)tag;
{
    
    WEAKSELF
    [MMRequestManager queryUserNormalWithContactType:tag callBack:^(NSArray<MMRecentContactsModel *> * _Nonnull friendList, NSError * _Nonnull error) {
        
        if (!error) {
            // 重新请求,清除之前的数据并重新赋值
            [weakSelf.laterPersonDataArr removeAllObjects];
            [weakSelf.laterPersonDataArr addObjectsFromArray:friendList];
        }else{
            [MMProgressHUD showHUD:MMDescriptionForError(error)];
        }
        
        [self.tableView reloadData];
    }];
    
}

- (void)noticFitchData:(NSNotification *) notification
{
    //刷新表格,造成数据库死锁
    [self queryDataFromDB];
}
    
    
//MARK: - 设置总的未读消息数
-(void)setTotalUnReadCount
{
        
    NSInteger mcount  = 0;
    NSMutableArray *arrTemp = [NSMutableArray array];
    
    if (self.laterPersonDataArr && [self.laterPersonDataArr count] > 0) {
        [arrTemp addObjectsFromArray:self.laterPersonDataArr];
    }
    
    MMRecentContactsModel *model;
    for (NSInteger i = 0,len = [arrTemp count]; i < len; i++) {
        id temp = arrTemp[i];
        
        if (temp && [temp isKindOfClass:[MMRecentContactsModel class]]) {
            model = (MMRecentContactsModel *)temp;
            mcount += model.unReadCount;
        }
    }
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        KinTabBarController *tabbar = (KinTabBarController *)self.tabBarController;
        if (tabbar) {
            if (mcount > 0) {
                [tabbar showBadgeOnItemIndex:0 withValue:mcount];
            }
            else{
                [tabbar hideBadgeOnItemIndex:0];
            }
        }
    });
}

    
#pragma mark - load data
- (void)queryDataFromDB
{
    
    //1.删除之前所有最近联系人列表
    [self.laterPersonDataArr removeAllObjects];
    
    //2.取出本地所有联系人消息
    [[MMChatDBManager shareManager] getAllConversations:^(NSArray<MMRecentContactsModel *> * _Nonnull conversations) {
        [self.laterPersonDataArr addObjectsFromArray:conversations];
        
        //2.1.刷新表格
        [self.tableView reloadData];
    }];
}


#pragma mark - YBPopupMenuDelegate
- (void)ybPopupMenu:(YBPopupMenu *)ybPopupMenu didSelectedAtIndex:(NSInteger)index
{
    switch (index) {
        //MARK:发起群聊
        case 0:
        {
            NewGroupViewController *group = [[NewGroupViewController alloc] init];
            [self.navigationController pushViewController:group animated:YES];
        }
            break;
            
        //MARK:加好友/群
        case 1:
        {
            SearchFriendsViewController *search = [[SearchFriendsViewController alloc] init];
            [self.navigationController pushViewController:search animated:YES];
        }
            break;
            
        //MARK:扫一扫
        case 2:{
            //相册权限检测
            [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
                if (status != PHAuthorizationStatusAuthorized) {
                    NSLog(@"开启权限设置");
                    [MMTools openSetting];
                    return;
                }
            }];
            
            SweepViewController *sweepVC = [[SweepViewController alloc] init];
            sweepVC.delegate = (id<SweepViewControllerDelegate>)self;
            [self presentViewController:sweepVC animated:YES completion:nil];
        }
            break;
            
        //MARK:帮助
        case 3:{
            [MMProgressHUD showHUD:@"帮助"];
        }
            break;
        default:
            break;
    }
}


//MARK: - SweepViewControllerDelegate(二维码扫描委托)
-(void)sweepViewDidFinishSuccess:(id)sweepResult
{
    NSString *strInfo = [NSString stringWithFormat:@"%@",sweepResult];
    MMLog(@"扫描成功，详见：%@",sweepResult);
    
    NSArray *arrTemp = [strInfo componentsSeparatedByString:@"://"];
    NSString *strId = [NSString stringWithFormat:@"%@",arrTemp.lastObject];
    if (!strId.checkTextEmpty) {
        [MMProgressHUD showHUD:@"信息不存在"];
        return;
    }
    
    //MARK:扫码添加用户
    if ([strInfo containsString:K_APP_QRCODE_USER]) {
        if ([strId isEqualToString:[YKUserInfoManager userInfo].userId]) {
            [MMProgressHUD showHUD:@"不能添加自己为好友"];
            return;
        }
        
        [MMRequestManager addFriendWithTargetId:strId
                                         andMsg:[NSString stringWithFormat:@"你好,我是%@,请求加您好友",[YKUserInfoManager userInfo].userName]
                                    aCompletion:^(NSDictionary * _Nonnull dic, NSError * _Nonnull error) {
                                        if (!error) {
                                            [MMProgressHUD showHUD: @"请求成功"];
                                        }else{
                                            [MMProgressHUD showHUD: MMDescriptionForError(error)];
                                        }
                                    }];
    }
    //MARK:扫码加群
    else if([strInfo containsString:K_APP_QRCODE_GROUP]){
        [MMRequestManager inviteFrd2GroupWithGroupId:strId
                                            friendId:[YKUserInfoManager userInfo].userId
                                         aCompletion:^(NSDictionary * _Nonnull dic, NSError * _Nonnull error) {
                                             if (K_APP_REQUEST_OK(dic[K_APP_REQUEST_CODE])) {
                                                 [MMProgressHUD showHUD:@"入群申请发送成功"];
                                             }else{
                                                 [MMProgressHUD showHUD:error?MMDescriptionForError(error):dic[K_APP_REQUEST_MSG]];
                                             }
                                         }];
    }
}

-(void)sweepViewDidFinishError
{
    MMLog(@"扫描失败");
}

    
#pragma mark - UITableViewDelegate and UITableViewDataSource
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}
    
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (self.laterPersonDataArr && [self.laterPersonDataArr count] > 0) {
        self.emptyView.hidden = YES;
        return [self.laterPersonDataArr count];
    }
    
    self.emptyView.hidden = NO;
    return 0;
}
    
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return G_GET_SCALE_HEIGHT(50.0f);
}
    
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    return nil;
}
    
- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 0.f;
}
    
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return 0.001;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
    {
        
    ContactTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) {
        cell=[[ContactTableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
    }
    
    //好友列表展示
    if (self.laterPersonDataArr && [self.laterPersonDataArr count] > indexPath.row) {
        [cell recentContactsWithModel:self.laterPersonDataArr[indexPath.row]];
    }

    return cell;
}
    
- (NSArray *)tableView:(UITableView *)tableView editActionsForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    NSString *topTitle = @"置顶";//@"取消置顶" : @"置顶";
    NSString *readTitle = @"标为已读";//@"标为已读" : @"标为未读";
    
    //设置删除按钮
    UITableViewRowAction * deleteRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:@"删除" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
        [self deleteNormalAction:indexPath];
    }];
    
    //置顶
    UITableViewRowAction * topRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:topTitle handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
        //[self setTopCellWithIndexPath:indexPath currentTop:group.isTop];
    }];
    
    //标记已读
    UITableViewRowAction * collectRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:readTitle handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
        //[self markerReadWithIndexPath:indexPath currentUnReadCount:group.unReadCount];
    }];
    
    collectRowAction.backgroundColor = [UIColor grayColor];
    topRowAction.backgroundColor     = [UIColor orangeColor];
    
    NSMutableArray *rowActionArr = [[NSMutableArray alloc] init];
    [rowActionArr addObject:deleteRowAction];
    [rowActionArr addObject:collectRowAction];
    [rowActionArr addObject:topRowAction];
    
    return  rowActionArr;
}
    
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    MMRecentContactsModel *model;
    if (self.laterPersonDataArr && [self.laterPersonDataArr count] > indexPath.row) {
        model = self.laterPersonDataArr[indexPath.row];
        [[NSNotificationCenter defaultCenter] postNotificationName:CHAT_PUSHVIEWCONTROLLER object:model];
    }
}
    
    
#pragma mark - Action
- (void)deleteNormalAction:(NSIndexPath *)indexPath
{
    
    MMRecentContactsModel *model;
    if (self.laterPersonDataArr && [self.laterPersonDataArr count] > indexPath.row) {
        model = self.laterPersonDataArr[indexPath.row];
    }
    
    WEAKSELF
    [[MMChatDBManager shareManager] deleteConversation:model.targetId
                                            completion:^(NSString * _Nonnull aConversationId,
                                                         NSError * _Nonnull aError) {
        if (!aError) {
            [weakSelf.laterPersonDataArr removeObjectAtIndex:indexPath.row];
            [weakSelf.tableView reloadData];
        }else{
            MMLog(@"删除失败");
        }
    }];
}
    
    
#pragma mark - Public
- (MMRecentContactsModel *)isExistConversationWithToUser:(NSString *)toUser
{
    
    MMRecentContactsModel *conversationModel;
    NSInteger index = 0;
    for (MMRecentContactsModel *conversation in self.laterPersonDataArr) {
        
        if ([conversation.userId isEqualToString:toUser]) {
            
            conversationModel = conversation;
            break;
        }
        index++;
    }
    return conversationModel;
}
    
- (void)addOrUpdateConversation:(NSString *)conversationName latestMessage:(MMMessageFrame *)message isRead:(BOOL)isRead
{
    
    MMRecentContactsModel *conversation = [self isExistConversationWithToUser:conversationName];
    if (conversation) {
        conversation.latestMsgStr = message.aMessage.slice.content;
        conversation.latestMsgTimeStamp = message.aMessage.timestamp;
        [self updateLatestMsgForConversation:conversation latestMessage:message isRead:isRead];
    }
    else {
        // 如果当前会话开启，则已读消息
        [self addConversationWithMessage:message conversationId:conversationName isReaded:isRead];
    }
}
    
- (void)addConversationWithMessage:(MMMessageFrame *)message conversationId:(NSString *)conversationId isReaded:(BOOL)read
{
    
    MMRecentContactsModel *conversation = [[MMRecentContactsModel alloc] init];
    conversation.unReadCount = read?0:1;
    conversation.userId = conversationId;
    
    [self.laterPersonDataArr insertObject:conversation atIndex:0];
    [self.tableView reloadData];
    
}
    
- (void)updateLatestMsgForConversation:(MMRecentContactsModel *)conversation latestMessage:(MMMessageFrame *)message isRead:(BOOL)isRead
{
    
    conversation.unReadCount += 1;
    if (isRead) {
        conversation.unReadCount = 0;
    }
    
    // 将会话放到最前面
    [self.laterPersonDataArr removeObject:conversation];
    [self.laterPersonDataArr insertObject:conversation atIndex:0];
    
    [self.tableView reloadData];
    
}
    
- (void)updateRedPointForUnreadWithConveration:(NSString *)conversationName
{
    MMRecentContactsModel *conversation = [self isExistConversationWithToUser:conversationName];
    if (conversation) {
        
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[self.laterPersonDataArr indexOfObject:conversation] inSection:0];
        [self updateRedPointForCellAtIndexPath:indexPath];
    }
}
    
    
// 打开会话，更新未读消息数量
- (void)updateRedPointForCellAtIndexPath:(NSIndexPath *)indexPath {
    
    MMRecentContactsModel *model = self.laterPersonDataArr[indexPath.row];
    model.unReadCount = 0;
    ContactTableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
    [cell updateUnreadCount:0];
}
    
 
#pragma mark - MMChatManagerDelegate
/**
 代理接收到消息
 
 @param manager 消息管理
 @param message 消息体
 */
- (void)clientManager:(MMClient *)manager didReceivedMessage:(MMMessage *)message
{
    
    MMMessageFrame *mf = [[MMMessageFrame alloc] init];
    mf.aMessage = message;
    
    NSString *conversationName = message.isSender  ? message.toID : message.fromID;
    
    BOOL isRead = [conversationName isEqualToString:[MMClient sharedClient].chattingConversation.conversationModel.toUid];
    [self addOrUpdateConversation:conversationName latestMessage:mf isRead:isRead];
}
    
    
//MARK: - lazy load
-(UIView *)emptyView{
    if (!_emptyView) {
        CGFloat w = G_SCREEN_WIDTH;
        CGFloat x = 0;
        CGFloat y = (G_SCREEN_HEIGHT - foot_view_empty_h) * 0.5;
        _emptyView = [[UIView alloc] initWithFrame:CGRectMake(x, y, w, foot_view_empty_h)];
        _emptyView.backgroundColor = [UIColor clearColor];
        _emptyView.hidden = YES;
        
        //MARK:图片
        w = 85;
        CGFloat h = 103;
        x = (_emptyView.frame.size.width - w) * 0.5;
        CGRect rect = CGRectMake(x, 0, w, h);
        UIImageView *imgBg = [BaseUIView createImage:rect
                                            AndImage:[UIImage imageNamed:@"search_empty_img"] AndBackgroundColor:nil WithisRadius:NO];
        [_emptyView addSubview:imgBg];
        
        //MARK:标题
        h = 21;
        w = _emptyView.frame.size.width;
        x = 0;
        y = _emptyView.frame.size.height - h - 20;
        UILabel *labInfo = [BaseUIView createLable:CGRectMake(x, y, w, h)
                                           AndText:@"暂无聊天记录哦"
                                      AndTextColor:[UIColor grayColor]
                                        AndTxtFont:[UIFont systemFontOfSize:16]
                                AndBackgroundColor:nil];
        labInfo.textAlignment = NSTextAlignmentCenter;
        [_emptyView addSubview:labInfo];
    }
    return _emptyView;
}

- (NSMutableArray *)laterPersonDataArr
{
    if (!_laterPersonDataArr) {
        _laterPersonDataArr = [NSMutableArray new];
    }
    return _laterPersonDataArr;
}
    
- (UITableView *)tableView{
    if (!_tableView) {
        CGFloat h = G_SCREEN_HEIGHT - kNavBarHeight - kTabBarHeight;
        _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, G_SCREEN_WIDTH, h)
                                                  style:UITableViewStylePlain];
        _tableView.backgroundColor = [UIColor clearColor];
        
        _tableView.delegate = self;
        _tableView.dataSource = self;
        
        _tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectZero];
        _tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        
        //空视图
        [_tableView addSubview:self.emptyView];
        
        if (@available(iOS 11.0, *)) {
            _tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
        }else {
            self.automaticallyAdjustsScrollViewInsets = NO;
        }
        
        //注册
        [_tableView registerClass:[ContactTableViewCell class] forCellReuseIdentifier:identifier];
    }
    return _tableView;
}
    
@end

