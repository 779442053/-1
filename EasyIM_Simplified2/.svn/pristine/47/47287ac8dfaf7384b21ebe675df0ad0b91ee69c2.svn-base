//
//  SearchFriendsViewController.m
//  EasyIM
//
//  Created by momo on 2019/4/10.
//  Copyright © 2019年 余谦. All rights reserved.
//

#import "SearchFriendsViewController.h"
#import "MJRefresh.h"

//Cell
#import "ContactTableViewCell.h"
#import "SearchFriendCell.h"

//Model
#import "SearchFriendModel.h"
#import "FriendInfoViewController.h"

//通讯录
#import "MMContactsViewController.h"

//添加好友
#import "AddFriViewController.h"


static NSString *const cellIde = @"cellIde";
static NSString *const page_size = @"10";

@interface SearchFriendsViewController ()<UITableViewDelegate,UITableViewDataSource,UISearchBarDelegate>
{
    NSInteger _currentRequestPage;
    NSInteger _pageIndex;
}
@property (nonatomic, strong) NSString *key;
@property (nonatomic,strong) UISearchBar *searchBar;//搜索框
@property (nonatomic,strong) UITableView *tableView;
@property (nonatomic,strong) NSMutableArray *dataSource;//数据源

/**
 * 用于比较对方是不是好友
 */
@property (nonatomic, strong) NSMutableArray *frdList;

@end

@implementation SearchFriendsViewController

#pragma Lazy
- (UISearchBar *)searchBar{
    if (!_searchBar) {
        _searchBar=[[UISearchBar alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, 44)];
        [_searchBar setBackgroundImage:[UIImage imageNamed:@"ic_searchBar_bgImage"]];
        [_searchBar sizeToFit];
        [_searchBar setPlaceholder:@"搜索"];
        //设置Placeholder字体大小
        UITextField *textfield = [_searchBar valueForKey:@"_searchField"];
        [textfield setValue:[UIFont systemFontOfSize:12.0] forKeyPath:@"_placeholderLabel.font"];
        
        [_searchBar.layer setBorderWidth:0.5];
        [_searchBar.layer setBorderColor:[UIColor colorWithRed:229.0/255 green:229.0/255 blue:229.0/255 alpha:1].CGColor];
        [_searchBar setDelegate:self];
        [_searchBar setKeyboardType:UIKeyboardTypeDefault];
    }
    return _searchBar;
}

- (UITableView *)tableView{
    if (!_tableView) {
        _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0.0, 0.0, SCREEN_WIDTH, SCREEN_HEIGHT-64.0) style:UITableViewStylePlain];
        
        [_tableView setDelegate:self];
        [_tableView setDataSource:self];
        
        [_tableView setSectionIndexBackgroundColor:[UIColor clearColor]];
        [_tableView setSectionIndexColor:[UIColor darkGrayColor]];
        
        [_tableView setBackgroundColor:[UIColor colorWithRed:240.0/255 green:240.0/255 blue:240.0/255 alpha:1]];
        [_tableView setSeparatorStyle:UITableViewCellSeparatorStyleNone];
        
        //cell无数据时，不显示间隔线
        UIView *view = [[UIView alloc] initWithFrame:CGRectZero];
        [_tableView setTableFooterView:view];
        _tableView.tableHeaderView = self.searchBar;
        
        //分隔线
        _tableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
        _tableView.separatorColor = G_EEF0F3_COLOR;
        
        //注册
        [_tableView registerClass:[SearchFriendCell class] forCellReuseIdentifier:cellIde];
    }
    return _tableView;
}

- (NSMutableArray *)dataSource{
    if (!_dataSource) {
        _dataSource = [NSMutableArray new];
    }
    return _dataSource;
}



- (void)viewDidLoad {
    [super viewDidLoad];
    
    if (_item == MMConGroup_Group) {
        self.navgationTitle = @"搜索群";
    }
    else{
        self.navgationTitle = @"添加好友";
    }
    
    [self initData];
    [self initWithViews];
}

#pragma mark - Private Mothod
- (void)initWithViews{
    [self.view setBackgroundColor:[UIColor whiteColor]];
    [self.view addSubview:self.tableView];
    
    //MARK:上拉加载更多
    WEAKSELF
    self.tableView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingBlock:^{
        [weakSelf requestData:NO];
    }];
}

- (void)initData
{
    _currentRequestPage = 1;
    _pageIndex = 0;
    _key = @"";

    self.frdList = [NSMutableArray arrayWithArray:[MMContactsViewController shareInstance].arrData];
}

#pragma mark - UITableViewDelegate&&UITableViewDataSource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    //section
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    //row
    return self.dataSource.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    SearchFriendCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIde];
    if (!cell) {
        cell=[[SearchFriendCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIde];
        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
    }
    
    if (self.dataSource && [self.dataSource count] > indexPath.row) {
        id cellData = self.dataSource[indexPath.row];
        if ([cellData isKindOfClass:[SearchFriendModel class]]) {
            cell.model = self.dataSource[indexPath.row];
        }
        else{
            MMGroupModel *model = (MMGroupModel *)cellData;
            [cell cellInitGroupData:model];
        }
    }
    
    cell.button.tag = indexPath.row;
    [cell.button addTarget:self action:@selector(checkButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
    
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    //rowheight
    return 50.0f;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    //群
    if (self.item == MMConGroup_Group) return;
    
    SearchFriendModel *searchModel = self.dataSource[indexPath.row];
    
    if (!searchModel.isFriend) {
//        NSString *myName = [YKUserInfoManager userInfo].getUName;
        AddFriViewController *vc = [[AddFriViewController alloc]init];
        vc.model = searchModel;
        [self.navigationController pushViewController:vc animated:YES];
    }
    else{
        //用户
        if ([self.dataSource count] && [self.dataSource count] > indexPath.row) {
//            SearchFriendModel *searchModel = self.dataSource[indexPath.row];
            
            FriendInfoViewController *friend = [[FriendInfoViewController alloc] init];
            friend.userId = searchModel.userid;
            friend.isFriend = searchModel.isFriend;
            [self.navigationController pushViewController:friend animated:YES];
        }
    }
    
    
}

#pragma mark - UISearchBarDelegate
- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
    
    //收回键盘
    [self.view endEditing:YES];
    _key = searchBar.text;
    [self requestData:YES];
}


#pragma mark - 查询好友网络请求
- (void)requestData:(BOOL)loadNew
{
 
    if (!_key.checkTextEmpty) {
        [self stopAnimation:NO];
        return;
    }
    
    if (loadNew) {
        _currentRequestPage = 1;
        _pageIndex = 0;
    }
    else{
        _currentRequestPage++;
        _pageIndex++;
    }
    
    //MARK:群搜索
    if (self.item == MMConGroup_Group) {
        [self searchGroup];
    }
    //MARK:搜索好友
    else{
        [self searchFriend];
    }
}

- (void)searchFriend{
    
    WEAKSELF
    [MMRequestManager searchUserWithKey:_key
                               startRow:@(_currentRequestPage).description
                               rowCount:page_size
                            aCompletion:^(NSArray<SearchFriendModel *> * _Nonnull searchFriendList,
                                          NSError * _Nonnull error) {
                                if (!error) {
                                    
                                    if (_currentRequestPage == 1) {
                                        [weakSelf.dataSource removeAllObjects];
                                    }
                                    
                                    [weakSelf.dataSource addObjectsFromArray:searchFriendList];
                                    
                                    [weakSelf.dataSource enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                                        
                                        SearchFriendModel *searchModel = (SearchFriendModel *)obj;
                                        [weakSelf.frdList enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                                            ContactsModel *contactsModel = (ContactsModel *)obj;
                                            if ([contactsModel isKindOfClass:[ContactsModel class]] && [searchModel.userid isEqualToString:contactsModel.userId]) {
                                                searchModel.isFriend = YES;
                                                return ;
                                            }
                                        }];
                                    }];
                                    
                                    [weakSelf stopAnimation:(searchFriendList.count < [page_size integerValue])?NO:YES];
                                }else{
                                    dispatch_async(dispatch_get_main_queue(), ^{
                                        [MMProgressHUD showHUD: MMDescriptionForError(error)];
                                        
                                        [weakSelf stopAnimation:NO];
                                    });
                                }
                            }];
}

- (void)stopAnimation:(BOOL)isMore{
    
    if (self.tableView.mj_footer) {
        if (isMore) {
            [self.tableView.mj_footer endRefreshing];
            [self.tableView.mj_footer resetNoMoreData];
        }
        else{
            [self.tableView.mj_footer endRefreshingWithNoMoreData];
        }
    }
    
    [self.tableView reloadData];
}

- (void)searchGroup{
    
    WEAKSELF
    [MMRequestManager searchGroupForName:_key
                                startRow:[NSString stringWithFormat:@"%ld",_pageIndex]
                                rowCount:page_size
                             aCompletion:^(NSArray<MMGroupModel *> * _Nullable arrGroupList, NSError * _Nullable error) {
                                 if (arrGroupList && [arrGroupList count] > 0) {
 
                                      if (_pageIndex == 0) {
                                          [self.dataSource removeAllObjects];
                                      }

                                    [self.dataSource addObjectsFromArray:arrGroupList];
                                    [weakSelf stopAnimation:(arrGroupList.count < [page_size integerValue])?NO:YES];
                                 }
                                 else{
                                     NSString *strError = @"群组数据不存在";
                                     if (error)
                                         strError = MMDescriptionForError(error);
                                     
                                     [MMProgressHUD showHUD: strError];
                                     
                                     [weakSelf stopAnimation:NO];
                                 }
                             }];
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{
    [self.view endEditing:YES];
}


//MARK: - 添加好友/群
- (void)checkButtonTapped:(UIButton *)sender
{
    NSInteger index = sender.tag;
    
    if (self.dataSource && [self.dataSource count] > index) {
         //加群
         if (self.item == MMConGroup_Group) {
             MMGroupModel *model = (MMGroupModel *)self.dataSource[index];
             if (model && [YKUserInfoManager userInfo]) {

                 [MMRequestManager inviteFrd2GroupWithGroupId:model.groupID
                                                     friendId:[YKUserInfoManager userInfo].userId
                                                  aCompletion:^(NSDictionary * _Nonnull dic, NSError * _Nonnull error) {
                                                      if (K_APP_REQUEST_OK(dic[K_APP_REQUEST_CODE])) {
                                                          dispatch_async(dispatch_get_main_queue(), ^{
                                                              [MMProgressHUD showHUD:dic[@"desc"]];
                                                          });
                                                      }
                                                      else{
                                                          dispatch_async(dispatch_get_main_queue(), ^{
                                                              [MMProgressHUD showHUD:error?MMDescriptionForError(error):dic[K_APP_REQUEST_MSG]];
                                                          });
                                                      }
                                                  }];
             }
             else{
                 [MMProgressHUD showHUD:@"群组数据不存在"];
             }
         }
         //加好友
         else{
             SearchFriendModel *searchModel = self.dataSource[index];
     
             if (!searchModel.isFriend) {
                 NSString *myName = [YKUserInfoManager userInfo].getUName;
                 
                 [self addFriendrequest:searchModel.userid
                                    msg:[NSString stringWithFormat:@"你好,我是%@,请求加您好友",myName]];
             }
             else{
                 [MMProgressHUD showHUD:@"对方已经是你的好友"];
             }
         }
    }
}

#pragma mark - 添加好友网络请求
- (void)addFriendrequest:(NSString *)tagUserid msg:(NSString *)msg
{
    
    if ([tagUserid isEqualToString:[YKUserInfoManager userInfo].userId]) {
        [MMProgressHUD showHUD:@"不能添加自己为好友"];
        return;
    }
    
    [MMRequestManager addFriendWithTargetId:tagUserid andMsg:msg aCompletion:^(NSDictionary * _Nonnull dic, NSError * _Nonnull error) {
        if (!error) {
            [MMProgressHUD showHUD: @"请求成功"];
        }else{
            [MMProgressHUD showHUD: MMDescriptionForError(error)];
        }
    }];
    
}

@end
